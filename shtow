#!/bin/bash

_runcommands() {
    local prefix=''
    if [[ $DRYRUN == 1 ]]; then
        prefix='echo'
    fi
    eval $prefix "$@"
}

echoerr() { printf "%s\n" "$*" >&2; }

shtow_install() {
    local pkg=$1
    local target
    target=$( realpath "${2-$HOME}" )
    local commands=()

    cd "$pkg" || return 1
    dirs="$(find . -mindepth 1 -type d | sed "s|./||")"
    for d in $dirs ; do
        commands+=("mkdir -p '$target/$d'")
    done
    for cmd in "${commands[@]}"; do
        _runcommands "$cmd"
    done;
    local commands=()

    local files
    files="$(find . -type f -or -type l | sed "s|./||")"
    for f in $files ; do
        local targetf="$target/$f"
        local thisdir
        thisdir=$(dirname "$targetf")
        local relative
        relative=$(realpath "$f" --relative-to="$thisdir")
        if [[ ! -f "$targetf" ]] ; then
            commands+=("ln -s '$relative' '$targetf'")
        else
            echoerr "$targetf already exists."
            if [[ ! $FORCE -eq 1 ]]; then
                echoerr "Aborting. To force continue, use the -f flag";
                return
            fi
        fi
    done
    for cmd in "${commands[@]}"; do
        _runcommands "$cmd"
    done;
}

shtow_uninstall() {
    local pkg=$1
    local target
    target=$( realpath "${2-$HOME}" )
    local commands=()

    cd "$pkg" || return 1
    local files
    files="$(find . -type f -or -type l | sed "s|./||")"
    for f in $files ; do
        local targetf="$target/$f"
        if [[ $(realpath "$targetf") == $(realpath "$f") ]] ; then
            commands+=("rm '$targetf'")
        elif [[ -f "$targetf" ]] ; then
            echoerr "$targetf does not point to to $(realpath "$f")."
            if [[ ! $FORCE -eq 1 ]]; then
                echoerr "Aborting. To force continue, use the -f flag";
                return
            fi
        elif [[ ! -f "$targetf" ]] ; then
            echoerr "$targetf does not exist. Nothing to do."
            if [[ ! $FORCE -eq 1 ]]; then
                echoerr "Aborting. To force continue, use the -f flag";
                return
            fi
        fi
    done

    dirs="$(find . -mindepth 1 -type d | sed "s|./||")"
    for d in $dirs ; do
        commands+=("find '$target/$d' -type d -empty -delete")
    done
    for cmd in "${commands[@]}"; do
        _runcommands "$cmd"
    done;
}

shtow_help() {
    echo "Usage: $0 [-D] package [target]"
}


if [[ $_ == "$0" ]]; then
    UNINSTALL=0
    DRYRUN=0
    FORCE=0
    OPTIND=1 
    while getopts "vhDfn" opt; do
        case "$opt" in
        h)
            shtow_help
            exit 0
            ;;
        D)  UNINSTALL=1
            ;;
        n)  DRYRUN=1
            ;;
        f)  FORCE=1
            ;;
        v)  VERBOSE=1
            ;;
        esac
    done
    shift $((OPTIND-1))
    
    if [[ -z ${1} ]] ; then
        shtow_help
        exit 1
    fi

    pkg=${1}
    target=${2-$HOME}
    
    if [[ $UNINSTALL -eq 1 ]]; then
        if [[ $VERBOSE -eq 1 ]] ; then echoerr "uninstalling $1 from $target" ; fi
        shtow_uninstall "$pkg" "$target"
    else
        if [[ $VERBOSE -eq 1 ]] ; then echoerr "installing $1 to $target" ; fi
        shtow_install "$pkg" "$target"
    fi
fi
